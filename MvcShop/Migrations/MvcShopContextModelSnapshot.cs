// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcShop.Data;

#nullable disable

namespace MvcShop.Migrations
{
    [DbContext(typeof(MvcShopContext))]
    partial class MvcShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MvcShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("MvcShop.Models.CategoryField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CategoryField");
                });

            modelBuilder.Entity("MvcShop.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("MvcShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Product_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("MvcShop.Models.ProductFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FieldId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductFieldValue");
                });


            modelBuilder.Entity("MvcShop.Models.Product", b =>
            {
                b.HasOne("MvcShop.Models.Category", null)
                    .WithMany("Products")
                    .HasForeignKey("CategoryId");
            });

            modelBuilder.Entity("MvcShop.Models.Category", b =>
            {
                b.Navigation("Products");
            });

            //Many-to-Many Relationship between Category and Field
            modelBuilder.Entity("MvcShop.Models.CategoryField", b =>
            {
                b.HasOne("MvcShop.Models.Category", null)
                    .WithMany("CategoryField")
                    .HasForeignKey("CategoryId");
            });

            modelBuilder.Entity("MvcShop.Models.Category", b =>
            {
                b.Navigation("CategoryField");
            });

            modelBuilder.Entity("MvcShop.Models.CategoryField", b =>
            {
                b.HasOne("MvcShop.Models.Field", null)
                    .WithMany("CategoryField")
                    .HasForeignKey("FieldId");
            });

            modelBuilder.Entity("MvcShop.Models.Field", b =>
            {
                b.Navigation("CategoryField");
            });

            //End Many-to-Many Relationship

            modelBuilder.Entity("MvcShop.Models.ProductFieldValue", b =>
            {
                b.HasOne("MvcShop.Models.Field", null)
                    .WithMany("ProductFieldValue")
                    .HasForeignKey("FieldId");
            });

            modelBuilder.Entity("MvcShop.Models.Field", b =>
            {
                b.Navigation("ProductFieldValue");
            });

            modelBuilder.Entity("MvcShop.Models.ProductFieldValue", b =>
            {
                b.HasOne("MvcShop.Models.Category", null)
                    .WithMany("ProductFieldValue")
                    .HasForeignKey("CategoryId");
            });

            modelBuilder.Entity("MvcShop.Models.Category", b =>
            {
                b.Navigation("ProductFieldValue");
            });


#pragma warning restore 612, 618
        }
    }
}
